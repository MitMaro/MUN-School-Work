#!/usr/bin/python
#########################################################
##  CS 2500 (Fall 2008), Assignment #8, Question #1    ##
##   Script File Name: addmachGUI.py                   ##
##       Student Name: Tim Oram                        ##
##         Login Name: oram                            ##
##              MUN #: #########                       ##
#########################################################
#    File: addmachGUI.py
# Project: CS 2500 (Assignment 8, Question 1)
#      By: Tim Oram [t.oram@mitmaro.ca]
# Created: November 24, 2008; Updated December 03, 2008
# Purpose: The Tkinter application that glues the calculator together
"""
The glue that puts everything together.

This script creates the window adds the MegaWidgets to it, binds the virtual
events generated by the widgets to their functions.
"""

# we need Tkinter
from Tkinter import *
import tkFont

# and I use math and decimal for some math functions
import math
import decimal

# calculator won't do much without this
from Calculator import Calculator

# and the MegaWidgets and extra functions
import CalcWidgets as CWidgets
import CalcFunctions as CFunctions

class CalcApplication(Frame, Calculator):
	def __init__(self, master = None):
		# call the frame constructor
		Frame.__init__(self, master)

		# give the calculator a 10 pixel border all around
		self.grid(padx=10, pady=10)

		# try Bitsteam Vera font first cause its a cool (and open-source)
		if "Bitstream Vera Sans Mono" in tkFont.families():
			self.font = tkFont.Font(family="Bitstream Vera Sans Mono", size="14")
		else:
			self.font = tkFont.Font(family="Courier", size="14")

		# populate the widgets
		self.__populate()

		# Call Calculator class constructor
		Calculator.__init__(self, display = self.display)


		# the functions of the calculator
		self.functions = {
			"add":[CFunctions.add, "+", 2, self.TYPE_OPERATOR],
			"subtract":[CFunctions.subtract, "-", 2, self.TYPE_OPERATOR],
			"multiply":[CFunctions.multiply, "*", 2, self.TYPE_OPERATOR],
			"divide":[CFunctions.divide, u"\u00F7", 2, self.TYPE_OPERATOR],
			"tan":[math.tan, "Tan", 1, self.TYPE_FUNCTION],
			"sin":[math.sin, "Sin", 1, self.TYPE_FUNCTION],
			"cos":[math.cos, "Cos", 1, self.TYPE_FUNCTION],
			"atan":[math.tan, "aTan", 1, self.TYPE_FUNCTION],
			"asin":[math.sin, "aSin", 1, self.TYPE_FUNCTION],
			"acos":[math.cos, "aCos", 1, self.TYPE_FUNCTION],
			"todegree":[math.degrees, ">Deg", 1, self.TYPE_FUNCTION],
			"toradian":[math.radians, ">Rad", 1, self.TYPE_FUNCTION],
			"pow":[CFunctions.pow, "^", 2, self.TYPE_OPERATOR],
			"mod":[CFunctions.fmod, "%", 2, self.TYPE_OPERATOR],
			"factorial":[CFunctions.factorial, "Factorial", 1, self.TYPE_FUNCTION],
			"log":[CFunctions.log, "log", 2, self.TYPE_FUNCTION],
			"ln":[math.log, "ln", 1, self.TYPE_FUNCTION],
			"sqrt":[decimal.Decimal.sqrt, u"\u221A", 1, self.TYPE_FUNCTION],
			"exp":[math.exp, "e^", 1, self.TYPE_FUNCTION],
		}
		# set the binds (virtual and keys)
		self.__setBinds()

	def __populate(self):
		""" Populate the widgets. """
		# the calculators display
		self.display = CWidgets.Display(self, 40, font=self.font)
		self.display.grid(row=0, columnspan=4, pady=5)

		# add the standard operations
		self.ops = CWidgets.StandardOperations(self, font=self.font)
		self.ops.grid(row=2, column=2, padx=5)

		# add the control operations
		self.controls = CWidgets.ControlOperations(self, font=self.font)
		self.controls.grid(row=1, column=0, columnspan=3, padx=5)

		# add the number pad
		self.numpad = CWidgets.NumberPad(self, font=self.font)
		self.numpad.grid(row=2,column=1, padx=5)

		# add the function panel
		self.extended = CWidgets.ExtendedOperations(self, font=self.font)
		self.extended.grid(row=2, column=0, padx=5)

	def __setBinds(self):
		""" Binds the virtual events"""
		# bind numbers
		self.bind_all("<<NumberPadClick-0>>", lambda e: self.inputHandle("0"))
		self.bind_all("<<NumberPadClick-1>>", lambda e: self.inputHandle("1"))
		self.bind_all("<<NumberPadClick-2>>", lambda e: self.inputHandle("2"))
		self.bind_all("<<NumberPadClick-3>>", lambda e: self.inputHandle("3"))
		self.bind_all("<<NumberPadClick-4>>", lambda e: self.inputHandle("4"))
		self.bind_all("<<NumberPadClick-5>>", lambda e: self.inputHandle("5"))
		self.bind_all("<<NumberPadClick-6>>", lambda e: self.inputHandle("6"))
		self.bind_all("<<NumberPadClick-7>>", lambda e: self.inputHandle("7"))
		self.bind_all("<<NumberPadClick-8>>", lambda e: self.inputHandle("8"))
		self.bind_all("<<NumberPadClick-9>>", lambda e: self.inputHandle("9"))

		# bind the special inputs
		self.bind_all("<<NumberPadClick-.>>", lambda e: self.inputHandle("."))
		self.bind_all("<<NumberPadClick-minus>>", lambda e: self.inputHandle("-"))
		self.bind_all("<<NumberPadClick-Exponent>>", lambda e: self.inputHandle("e"))
		self.bind_all("<<NumberPadClick-FuncSep>>", lambda e: self.argsSeparatorHandle())
		self.bind_all("<<NumberPadClick-Pi>>", lambda e: self.setValue(str(math.pi)))
		self.bind_all("<<StandardOperation-=>>", lambda e: self.equals())

		# function binds
		self.bind_all("<<StandardOperation-+>>", lambda e: self.funcHandle('add'))
		self.bind_all("<<StandardOperation-*>>", lambda e: self.funcHandle('multiply'))
		self.bind_all("<<StandardOperation-minus>>", lambda e: self.funcHandle('subtract'))
		self.bind_all("<<StandardOperation-/>>", lambda e: self.funcHandle('divide'))

		# bind the history operations (next goes to prev cause the prev history is
		# next in the list)
		self.bind_all("<<ControlOperation-FuncPrev>>", lambda e: self.funcsHistoryNext())
		self.bind_all("<<ControlOperation-FuncNext>>", lambda e: self.funcsHistoryPrev())
		self.bind_all("<<ControlOperation-OpPrev>>", lambda e: self.ansHistoryNext())
		self.bind_all("<<ControlOperation-OpNext>>", lambda e: self.ansHistoryPrev())

		# bind the control operations
		self.bind_all("<<ControlOperation-Clear>>", lambda e: self.clear())
		self.bind_all("<<ControlOperation-ClearEntry>>", lambda e: self.clearEntry())
		self.bind_all("<<ControlOperation-Back>>",  lambda e: self.back())
		self.bind_all("<<ControlOperation-Quit>>",  lambda e: sys.exit())

		# bind the function panel
		self.bind_all("<<ExtendedOperations-sin>>", lambda e: self.funcHandle('sin'))
		self.bind_all("<<ExtendedOperations-asin>>", lambda e: self.funcHandle('asin'))
		self.bind_all("<<ExtendedOperations-cos>>", lambda e: self.funcHandle('cos'))
		self.bind_all("<<ExtendedOperations-acos>>", lambda e: self.funcHandle('acos'))
		self.bind_all("<<ExtendedOperations-tan>>", lambda e: self.funcHandle('tan'))
		self.bind_all("<<ExtendedOperations-atan>>", lambda e: self.funcHandle('atan'))
		self.bind_all("<<ExtendedOperations-log>>", lambda e: self.funcHandle('log'))
		self.bind_all("<<ExtendedOperations-ln>>", lambda e: self.funcHandle('ln'))
		self.bind_all("<<ExtendedOperations-deg>>", lambda e: self.funcHandle('todegree'))
		self.bind_all("<<ExtendedOperations-rad>>", lambda e: self.funcHandle('toradian'))
		self.bind_all("<<ExtendedOperations-mod>>", lambda e: self.funcHandle('mod'))
		self.bind_all("<<ExtendedOperations-pow>>", lambda e: self.funcHandle('pow'))
		self.bind_all("<<ExtendedOperations-sqrt>>", lambda e: self.funcHandle('sqrt'))
		self.bind_all("<<ExtendedOperations-exp>>", lambda e: self.funcHandle('exp'))
		self.bind_all("<<ExtendedOperations-factorial>>", lambda e: self.funcHandle('factorial'))


# a Tk instance
root = Tk()
# make it not resizable
root.resizable(0,0)

# create an instance of the calculator app
app = CalcApplication(master = root)

# set the title of the app
app.master.title("Tim's PyCalc")

# and its starting position
root.geometry("+250+100")

# program doesn't do much without this
root.mainloop()

# 1484 lines of code
